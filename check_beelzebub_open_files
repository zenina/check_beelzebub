#!/bin/bash
return_nrpe(){ 
		return="$1"
		shift 1
		message="$@"
		echo "$message"

		if [[ -n $return ]]; then
		exit 0 
		else
		exit $return
		fi
}

parseOpts(){
options=':w:c:t:'

cflag=false
wflag=false
while getopts $options opt; do
  case $opt in
    	w)
		echo "-w warning threshold set at $OPTARG" >&2
		wval=${OPTARG}
		wflag=true
		;;

	c)
		echo "-c warning threshold set at $OPTARG" >&2
                cval=${OPTARG}
		cflag=true
		;;
	
	\?)
		echo "Invalid option: -$OPTARG" >&2
		return_nrpe 2
		;;

	:  ) 
		echo "Missing option argument for -$OPTARG" >&2
		return_nrpe 2
		;;

	*  ) 
		echo "Unimplemented option: -$OPTARG" >&2
		return_nrpe 2
		;;
  esac
done

## Require flags, and numeric arguments for $OPTARG
if ! $wflag && ! [[ $wval =~ ^-?[0-9]+$ ]];
then
    return_nrpe 2 "-w warning_threshold must be specified with integer argument"
    
fi
if ! $cflag && ! [[ $cval =~ ^-?[0-9]+$ ]];
then
    return_nrpe 2 "-c critical_threshold must be specified with integer argument"
fi

}


checkFileCount(){
echo checkcnt
fileCount=$(lsof | grep beelzebub | egrep '.*'.yaml'$' | wc -l)
echo $fileCount
if [[ -n "${fileCount}" ]]; then
	if [[ "${fileCount}" -lt "${wval}" ]]; then
		echo green
		return_nrpe 0 "[GREEN]: Transaction file count ${fileCount} (< ${wval})"
	elif [[ "${fileCount}" -ge "${wval}" ]] && [[ "${fileCount}" -le "${cval}" ]]; then
		echo warning
		return_nrpe 1 "[WARNING]: Transaction file count ${fileCount} (> ${wval})"
	elif [[ "${fileCount}" -ge "${cval}" ]]; then
		echo critical
		return_nrpe 2 "[CRITICAL]: Transaction file count ${fileCount} (> ${cval})"
	fi	
elif [[ -z "${fileCount}" ]]; then
	echo "No data"
	return_nrpe 2 "[CRITICAL]: No Transaction file count data"
fi
}

parseOpts $@
checkFileCount
